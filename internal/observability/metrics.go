package observability

import (
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

var (
	HTTPRequestsTotal = promauto.NewCounterVec(
		prometheus.CounterOpts{
			Name: "http_requests_total",
			Help: "Total number of HTTP requests by status code and method",
		},
		[]string{"status", "method"},
	)

	HTTPRequestDuration = promauto.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "http_request_duration_seconds",
			Help:    "Duration of HTTP requests",
			Buckets: prometheus.DefBuckets,
		},
		[]string{"handler"},
	)

	TokensInputTotal = promauto.NewCounterVec(
		prometheus.CounterOpts{
			Name: "llm_input_tokens_total",
			Help: "Total number of input tokens processed by the LLM",
		},
		[]string{"provider", "model"},
	)

	TokensOutputTotal = promauto.NewCounterVec(
		prometheus.CounterOpts{
			Name: "llm_output_tokens_total",
			Help: "Total number of output tokens generated by the LLM",
		},
		[]string{"provider", "model"},
	)

	ToolsUsageTotal = promauto.NewCounterVec(
		prometheus.CounterOpts{
			Name: "llm_tools_usage_total",
			Help: "Total number of times each tool has been used",
		},
		[]string{"tool_name", "provider", "model"},
	)

	ToolsEnabledTotal = promauto.NewCounterVec(
		prometheus.CounterOpts{
			Name: "llm_tools_enabled_requests_total",
			Help: "Total number of requests where tools were enabled",
		},
		[]string{"provider", "model"},
	)

	LLMCompletionDuration = promauto.NewHistogramVec(
		prometheus.HistogramOpts{
			Name: "llm_completion_duration_seconds",
			Help: "Duration of LLM completion requests in seconds",
			// Buckets are chosen to cover typical LLM response times
			// from 100ms to 30s with good granularity
			Buckets: []float64{5.0, 10.0, 15.0, 20.0, 30.0, 60.0, 120.0, 300.0},
		},
		[]string{"provider", "model", "status"},
	)

	LLMCompletionInFlight = promauto.NewGaugeVec(
		prometheus.GaugeOpts{
			Name: "llm_completion_in_flight",
			Help: "Number of LLM completion requests currently in flight",
		},
		[]string{"provider", "model"},
	)
)
